# -*- coding: utf-8 -*-
"""EV1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CzjIqgxXE0lwOi94yMI98vCvtggG03Uv
"""

class Nota:

    def _init_(self, folio, fecha, cliente):

        self.folio = folio

        self.fecha = fecha

        self.cliente = cliente

        self.servicios = []

        self.monto_total = 0.0

        self.cancelada = False



    def agregar_servicio(self, nombre_servicio, costo_servicio):

        self.servicios.append((nombre_servicio, costo_servicio))

        self.monto_total += costo_servicio





class TallerMecanico:

    def _init_(self):

        self.notas = []



    def generar_folio(self):

        return len(self.notas) + 1



    def registrar_nota(self):

        folio = self.generar_folio()

        fecha = input("Ingrese la fecha de la nota (YYYY-MM-DD): ")

        cliente = input("Ingrese el nombre del cliente: ")

        nota = Nota(folio, fecha, cliente)

        while True:

            nombre_servicio = input("Ingrese el nombre del servicio: ")

            costo_servicio = float(input("Ingrese el costo del servicio: "))

            nota.agregar_servicio(nombre_servicio, costo_servicio)

            continuar = input("¿Desea agregar otro servicio? (S/N): ")

            if continuar.lower() != 's':

                break

        self.notas.append(nota)

        print("Nota registrada con éxito.")



    def consultar_por_periodo(self):

        fecha_inicial = input("Ingrese la fecha inicial (YYYY-MM-DD): ")

        fecha_final = input("Ingrese la fecha final (YYYY-MM-DD): ")

        notas_periodo = [nota for nota in self.notas if fecha_inicial <= nota.fecha <= fecha_final]

        if not notas_periodo:

            print("No hay notas emitidas para el período indicado.")

        else:

            print("Notas en el período:")

            for nota in notas_periodo:

                print(f"Folio: {nota.folio}, Fecha: {nota.fecha}, Cliente: {nota.cliente}, Monto: {nota.monto_total}")



    def consultar_por_folio(self):

        folio_consulta = int(input("Ingrese el folio de la nota a consultar: "))

        nota_consulta = next((nota for nota in self.notas if nota.folio == folio_consulta), None)

        if nota_consulta is None:

            print("La nota no se encuentra en el sistema.")

        else:

            print(f"Folio: {nota_consulta.folio}, Fecha: {nota_consulta.fecha}, Cliente: {nota_consulta.cliente}, Monto: {nota_consulta.monto_total}")

            print("Detalle de servicios:")

            for servicio in nota_consulta.servicios:

                print(f"  Servicio: {servicio[0]}, Costo: {servicio[1]}")



    def cancelar_nota(self):

        folio_cancelar = int(input("Ingrese el folio de la nota a cancelar: "))

        nota_cancelar = next((nota for nota in self.notas if nota.folio == folio_cancelar), None)

        if nota_cancelar is None or nota_cancelar.cancelada:

            print("La nota no está en el sistema.")

        else:

            print(f"Folio: {nota_cancelar.folio}, Fecha: {nota_cancelar.fecha}, Cliente: {nota_cancelar.cliente}, Monto: {nota_cancelar.monto_total}")

            confirmacion = input("¿Confirmar cancelación de la nota? (S/N): ")

            if confirmacion.lower() == 's':

                nota_cancelar.cancelada = True

                print("Nota cancelada.")



    def recuperar_nota(self):

        notas_canceladas = [nota for nota in self.notas if nota.cancelada]

        if not notas_canceladas:

            print("No hay notas canceladas en el sistema.")

        else:

            print("Notas canceladas:")

            for nota in notas_canceladas:

                print(f"Folio: {nota.folio}, Fecha: {nota.fecha}, Cliente: {nota.cliente}")

            folio_recuperar = int(input("Ingrese el folio de la nota a recuperar (o 0 para cancelar): "))

            if folio_recuperar != 0:

                nota_recuperar = next((nota for nota in notas_canceladas if nota.folio == folio_recuperar), None)

                if nota_recuperar is None:

                    print("La nota no está en el sistema.")

                else:

                    print(f"Folio: {nota_recuperar.folio}, Fecha: {nota_recuperar.fecha}, Cliente: {nota_recuperar.cliente}, Monto: {nota_recuperar.monto_total}")

                    confirmacion = input("¿Confirmar recuperación de la nota? (S/N): ")

                    if confirmacion.lower() == 's':

                        nota_recuperar.cancelada = False

                        print("Nota recuperada.")



    def ejecutar(self):

        while True:

            print("\nMenú Principal:")

            print("1. Registrar una nota")

            print("2. Consultas y reportes")

            print("3. Cancelar una nota")

            print("4. Recuperar una nota")

            print("5. Salir")

            opcion = input("Seleccione una opción: ")



            if opcion == '1':

                self.registrar_nota()

            elif opcion == '2':

                while True:

                    print("\nSubmenú Consultas y Reportes:")

                    print("1. Consulta por período")

                    print("2. Consulta por folio")

                    print("3. Volver al menú principal")

                    subopcion = input("Seleccione una opción: ")



                    if subopcion == '1':

                        self.consultar_por_periodo()

                    elif subopcion == '2':

                        self.consultar_por_folio()

                    elif subopcion == '3':

                        break

                    else:

                        print("Opción inválida.")

            elif opcion == '3':

                self.cancelar_nota()

            elif opcion == '4':

                self.recuperar_nota()

            elif opcion == '5':

                confirmacion_salir = input("¿Está seguro que desea salir? (S/N): ")

                if confirmacion_salir.lower() == 's':

                    print("¡Hasta luego!")

                    return

            else:

                print("Opción inválida.")





if _name_ == "_main_":

    taller = TallerMecanico()

    taller.ejecutar()